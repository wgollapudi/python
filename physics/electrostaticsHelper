from dataclasses import dataclass

@dataclass
class pointCharge():
    xPos: float = 0
    yPos: float = 0
    zPos: float = 0
    charge: float = 0

    def __post_init__(self) -> None:
        self.e = 1.6 * 10**-19
        self.pi = 3.14159265358979323846
        self.epsilon0 = 8.854187817 * 10**-12
        self.debug = False

    def getPosition(self) -> [int]:
        return [self.xPos,self.yPos,self.zPos]
    
    def calcElectricField(self, x1: float, y1: float, z1: float) -> (float, float, float):
        r = (x1-self.xPos, y1-self.yPos, z1-self.zPos)
        magR = (sum(map(lambda i: i**2, r)))**(1/2)
        rHat = tuple(map(lambda i: i/magR, r))
        magEF = (1/(4*self.pi*self.epsilon0))*(self.charge/(magR)**2)
        electricField = tuple(map(lambda i: i*magEF, rHat))
        if self.debug:
            print(f"{rHat=}")
            print(f"{magR=}")
            print(f"{magEF=}")
        return electricField

@dataclass
class proton(pointCharge):
    def __post_init__(self) -> None:
        super.__post_init__()
        charge = 1.6 * 10**-19

@dataclass
class electron(pointCharge):
    def __post_init__(self) -> None:
        super.__post_init__()
        charge = -1.6 * 10**-19

class electricField():
    def __init__(self, *particles: pointCharge):
        self.particles = list(particles)
    
    def getParticles(self) -> [pointCharge]:
        return self.particles
    
    def getParticlesLoc(self) -> [list]:
        locList = []
        for particle in self.particles:
            locList.append(particle.getPosition())
        
        return locList
    
    def addParticle(self, particle: pointCharge) -> None:
        self.particles.append(particle)
    
    def calcElectricFeild(self, x1, y1, z1) -> (float, float, float):
        fields = (0,0,0)
        for particle in self.particles:
            fields = tuple(map(lambda x,y: x+y, fields, particle.calcElectricField(x1, y1, z1)))

        return fields
        
def main():
    rodLength = 2
    numRodSegments = 6
    totalCharge = 3*10**-8
    E1 = electricField()
    for num in range(numRodSegments):
        q = pointCharge(-rodLength/2 + num*(rodLength/(numRodSegments-1)), 0, 0, totalCharge/numRodSegments)
        E1.addParticle(q)

    print(E1.getParticlesLoc())
    print(E1.calcElectricFeild(0.3, 0.4, 0))

if __name__ == '__main__':
    main()